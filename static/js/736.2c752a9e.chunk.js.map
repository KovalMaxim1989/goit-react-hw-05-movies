{"version":3,"file":"static/js/736.2c752a9e.chunk.js","mappings":"uPAEaA,EAAOC,EAAAA,GAAAA,GAAH,+OAWJC,EAAYD,EAAAA,GAAAA,GAAH,iK,mBCqCtB,MAzCA,WACE,OAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAWR,OATAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,IAAIC,gBAG3B,OAFAC,EAAAA,GAAiBL,EAASG,GAAgBG,KAAKP,GAExC,WACLI,EAAeI,OAChB,CACF,GAAE,CAACP,KAGF,0BACE,SAACN,EAAD,UACGI,EAAKU,KAAI,SAAAV,GAAI,OACZ,SAACF,EAAD,WACE,eACEa,KArBQ,mCAqBcX,EAAKY,cAC3BC,IAAI,sBACJC,OAAO,SAHT,WAKE,gBACEC,MAAO,IACPC,IACEhB,EAAKiB,aA7BF,kCA8BgBjB,EAAKiB,aACpBC,EAENC,IAAKnB,EAAKY,iBAEZ,uBAAIZ,EAAKY,oBAfGZ,EAAKoB,QADT,OAuBrB,C,6MC3CKC,EAAQC,EAAAA,EAAAA,OAAa,CACzBC,QAAS,gCACTC,OAAQ,CAAEC,QAAS,sCAGd,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAAgCC,EAAOC,GAAvC,kGAEkBP,EAAMQ,IAAI,eAAgB,CAC7CL,OAAQ,CACNG,MAAAA,EACAG,OAAQF,EAAWE,UALpB,cAEGC,EAFH,gCASIA,QATJ,IASIA,GATJ,UASIA,EAAQC,YATZ,aASI,EAAcC,SATlB,gCAWHC,EAAAA,GAAAA,MAAY,sCACZC,QAAQC,MAAR,MAZG,gFAgBA,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+GAEkBhB,EAAMQ,IAAI,qBAAsB,CACnDL,OAAQ,CACNc,SAAU,WAJX,cAEGP,EAFH,gCAQIA,QARJ,IAQIA,GARJ,UAQIA,EAAQC,YARZ,aAQI,EAAcC,SARlB,gCAUHC,EAAAA,GAAAA,MAAY,sCACZC,QAAQC,MAAR,MAXG,gFAeA,SAAeG,EAAtB,iDAAO,OAAP,oBAAO,WAAoCC,EAAIZ,GAAxC,gGAEiBP,EAAMQ,IAAN,gBAAmBW,GAAM,CAC3ChB,OAAQ,CACNM,OAAQF,EAAWE,UAJpB,cAEGW,EAFH,gCAQIA,QARJ,IAQIA,OARJ,EAQIA,EAAOT,MARX,gCAUHE,EAAAA,GAAAA,MAAY,sCACZC,QAAQC,MAAR,MAXG,gFAeA,SAAeM,EAAtB,iDAAO,OAAP,oBAAO,WAA4BF,EAAIZ,GAAhC,kGAEkBP,EAAMQ,IAAN,gBAAmBW,EAAnB,YAAiC,CACpDhB,OAAQ,CACNM,OAAQF,EAAWE,UAJpB,cAEGa,EAFH,gCAQIA,QARJ,IAQIA,GARJ,UAQIA,EAAQX,YARZ,aAQI,EAAchC,MARlB,gCAUHkC,EAAAA,GAAAA,MAAY,sCACZC,QAAQC,MAAR,MAXG,gFAeA,SAAeQ,EAAtB,iDAAO,OAAP,oBAAO,WAA+BJ,EAAIZ,GAAnC,kGAEmBP,EAAMQ,IAAN,gBAAmBW,EAAnB,YAAiC,CACrDhB,OAAQ,CACNM,OAAQF,EAAWE,UAJpB,cAEGe,EAFH,gCAQIA,QARJ,IAQIA,GARJ,UAQIA,EAASb,YARb,aAQI,EAAeC,SARnB,gCAUHC,EAAAA,GAAAA,MAAY,sCACZC,QAAQC,MAAR,MAXG,gF","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding-bottom: 20px;\n  margin-top: 20px;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-evenly;\n  gap: 15px;\n  border-bottom: 1px solid black;\n`;\nexport const ActorItem = styled.li`\n  &:hover,\n  &:focus {\n    cursor: pointer;\n    box-shadow: 2px 2px 6px 2px rgba(254, 60, 1, 0.9);\n    transform: scale(1.05);\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as API from '../../services/api';\nimport { List, ActorItem } from './Cast.styled';\nimport defaultImgCast from '../../img/anon.jpg';\n\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\nconst GOOGLE_SERACH = 'https://www.google.com/search?q=';\n\nfunction Cast() {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const abortConroller = new AbortController();\n    API.getMovieCast(movieId, abortConroller).then(setCast);\n\n    return () => {\n      abortConroller.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <div>\n      <List>\n        {cast.map(cast => (\n          <ActorItem key={cast.cast_id}>\n            <a\n              href={GOOGLE_SERACH + cast.original_name}\n              rel=\"noreferrer noopener\"\n              target=\"_blank\"\n            >\n              <img\n                width={250}\n                src={\n                  cast.profile_path\n                    ? BASE_IMG_URL + cast.profile_path\n                    : defaultImgCast\n                }\n                alt={cast.original_name}\n              />\n              <p>{cast.original_name}</p>\n            </a>\n          </ActorItem>\n        ))}\n      </List>\n    </div>\n  );\n}\n\nexport default Cast;\n","import axios from 'axios';\nimport toast from 'react-hot-toast';\n\n// #API_KEY = 'd03712107dcdd723f1173c5ee2c0d8c1';\n\nconst agent = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: { api_key: 'd03712107dcdd723f1173c5ee2c0d8c1' },\n});\n\nexport async function getMoviesByQuery(query, controller) {\n  try {\n    const movies = await agent.get('search/movie', {\n      params: {\n        query,\n        signal: controller.signal,\n      },\n    });\n\n    return movies?.data?.results;\n  } catch (error) {\n    toast.error('Something went wrong ðŸ˜¥!');\n    console.error(error);\n  }\n}\n\nexport async function getTrendingMovies() {\n  try {\n    const movies = await agent.get('trending/movie/day', {\n      params: {\n        language: 'en-US',\n      },\n    });\n\n    return movies?.data?.results;\n  } catch (error) {\n    toast.error('Something went wrong ðŸ˜¥!');\n    console.error(error);\n  }\n}\n\nexport async function getMoviesDetailsById(id, controller) {\n  try {\n    const movie = await agent.get(`movie/${id}`, {\n      params: {\n        signal: controller.signal,\n      },\n    });\n\n    return movie?.data;\n  } catch (error) {\n    toast.error('Something went wrong ðŸ˜¥!');\n    console.error(error);\n  }\n}\n\nexport async function getMovieCast(id, controller) {\n  try {\n    const actors = await agent.get(`movie/${id}/credits`, {\n      params: {\n        signal: controller.signal,\n      },\n    });\n\n    return actors?.data?.cast;\n  } catch (error) {\n    toast.error('Something went wrong ðŸ˜¥!');\n    console.error(error);\n  }\n}\n\nexport async function getMovieReviews(id, controller) {\n  try {\n    const reviews = await agent.get(`movie/${id}/reviews`, {\n      params: {\n        signal: controller.signal,\n      },\n    });\n\n    return reviews?.data?.results;\n  } catch (error) {\n    toast.error('Something went wrong ðŸ˜¥!');\n    console.error(error);\n  }\n}"],"names":["List","styled","ActorItem","useState","cast","setCast","movieId","useParams","useEffect","abortConroller","AbortController","API","then","abort","map","href","original_name","rel","target","width","src","profile_path","defaultImgCast","alt","cast_id","agent","axios","baseURL","params","api_key","getMoviesByQuery","query","controller","get","signal","movies","data","results","toast","console","error","getTrendingMovies","language","getMoviesDetailsById","id","movie","getMovieCast","actors","getMovieReviews","reviews"],"sourceRoot":""}